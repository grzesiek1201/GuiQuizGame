import random
import Questions
import time
from threading import Thread


class QuizGame:
    def __init__(self):
        self.points = 0
        self.questions_count = 0
        self.player_help_count = 10
        self.correct_answer = None
        self.time_answer = 20
        self.time_up = False

    def welcome_message(self):
        message = (
            "Welcome in TextQuizGame! version 1.0\n"
            "You will have to answer 20 questions.\n"
            "Of course, if you have trouble, you can ask for help by typing HELP.\n"
            "You have few options for help, they are using different amount of points, which are:\n"
            "next: 4 points\n"
            "time: 2 points\n"
            "half: 1 point\n"
            "Type START to run the game.\n"
        )
        print(message)

    def questions_shuffle(self):
        shuffled_questions = list(Questions.questions.values())
        random.shuffle(shuffled_questions)
        return shuffled_questions

    def printing_question(self):
        shuffled_questions = self.questions_shuffle()
        question = shuffled_questions[self.questions_count]
        print(f"Question {self.questions_count + 1}: {question['question']}")
        self.start_timer()
        for option, answer in question['answers'].items():
            print(f"{option}: {answer}")

    def correct_player_answer(self):
        self.correct_answer = self.questions_shuffle()[self.questions_count]["correct"]

    def half_answers(self):
        question = self.questions_shuffle()[self.questions_count]
        correct_option = question["correct"]
        wrong_options = [option for option in question["answers"] if option != correct_option]
        random.shuffle(wrong_options)
        wrong_option = wrong_options[0]
        remaining_options = [correct_option, wrong_option]
        question["answers"] = {option: question["answers"][option] for option in
                               remaining_options}
        print("One random wrong answer has been removed. Choose from the remaining options.")
        print(f"{correct_option} or {wrong_option}")

    def start_timer(self):
        self.time_up = False
        self.timer_thread = Thread(target=self.player_time)
        self.timer_thread.start()

    def player_time(self):
        for remaining_time in range(self.time_answer, 0, -1):
            time.sleep(1)
        print("\nTime's up! You didn't answer the question.")
        self.time_up = True

    def player_choice(self, player_input):
        if self.time_up:
            print("Time's up! You didn't answer the question.")
            self.lose_game()
        elif player_input in ["a", "b", "c", "d"]:
            if player_input == self.correct_answer:
                self.points += 1
                print("Correct! Good Job!")
            else:
                print(
                    f"Incorrect answer, you have lost. Correct answer was {self.correct_answer}")
                self.lose_game()
        elif player_input.lower() == "help":
            self.player_help_logic(player_input)
        elif player_input in self.questions_shuffle()[self.questions_count]["answers"]:
            if self.questions_shuffle()[self.questions_count]["answers"][player_input] == self.correct_answer:
                self.points += 1
                print("Correct! Good Job!")
            else:
                print(
                    f"Incorrect answer, you have lost. Correct answer was {self.correct_answer}")
                self.lose_game()
        else:
            print("Invalid input. Please enter a, b, c, d, or help.")

    def player_help_logic(self, player_input):
        if player_input == "help":
            self.time_answer += 3
            input_help = input("Choose what kind of help would you like to use? (next/half/time): ")
            if input_help == "next":
                self.time_answer += 3
                if self.player_help_count <= 4:
                    print(f"You have run out of help points. Current points: {self.player_help_count}")
                else:
                    print("Okay, let's move to another question. It doesn't count as a correct answer.")
                    self.player_help_count -= 4
                    self.questions_count += 1
            elif input_help == "half":
                self.time_answer += 3
                if self.player_help_count < 1:
                    print(f"You have run out of help points. Current points: {self.player_help_count}")
                else:
                    self.player_help_count -= 1
                    self.half_answers()
            elif input_help == "time":
                self.time_answer += 3
                if self.player_help_count <= 2:
                    print(f"You have run out of help points. Current points: {self.player_help_count}")
                else:
                    self.player_help_count -= 2
                    self.time_answer += 30
                    print("You have 30 seconds more to answer. Take your time.")

    def lose_game(self):
        print(f"Game over! You scored {self.points} points.")
        exit()

    def win_game(self):
        if self.points == 20:
            print("Congratulations! You won! You have incredible knowledge about programming!")
            exit()


if __name__ == "__main__":
    game = QuizGame()
    game.welcome_message()

    while game.questions_count < 20:
        game.printing_question()
        game.correct_player_answer()
        player_input = input("Which answer is correct?: ")
        game.player_choice(player_input)
        game.questions_count += 1
